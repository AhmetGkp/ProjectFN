{"ast":null,"code":"var _jsxFileName = \"/home/tolga/VS Code workspace/Brukth\\xE5nd/secondhand/src/upload-image.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction UploadImage() {\n  _s();\n\n  const createImage = async (url) => new Promise((resolve, reject) => {\n    var newImage = new Image();\n    newImage.addEventListener(\"load\", () => resolve(newImage));\n    newImage.addEventListener(\"error\", error => reject(error));\n    newImage.setAttribute(\"crossOrigin\", \"anonymous\"); // needed to avoid cross-origin issues on CodeSandbox\n\n    newImage.src = url;\n  });\n\n  const [doc, setDoc] = useState();\n  const [image, setImage] = useState(null);\n\n  const getRadianAngle = degreeValue => {\n    return degreeValue * Math.PI / 180;\n  };\n\n  const dataURLtoFile = (dataurl, filename) => {\n    const arr = dataurl.split(\",\");\n    const mime = arr[0].match(/:(.*?);/)[1];\n    const bstr = atob(arr[1]);\n    let n = bstr.length;\n    const u8arr = new Uint8Array(n);\n\n    while (n--) u8arr[n] = bstr.charCodeAt(n);\n\n    return new File([u8arr], filename, {\n      type: mime\n    });\n  };\n\n  const getCroppedImage = async imageSrc => {\n    const myImage = await createImage(imageSrc);\n    var rotation = 0;\n    const canvas = document.createElement(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    const maxSize = Math.max(myImage.width, myImage.height); //const safeArea = 2 * ((maxSize / 2) * Math.sqrt(2));\n\n    const safeArea = maxSize; // set each dimensions to double largest dimension to allow for a safe area for the\n    // image to rotate in without being clipped by canvas context\n\n    canvas.width = myImage.width;\n    canvas.height = myImage.height; // translate canvas context to a central location on image to allow rotating around the center.\n\n    /* ctx.translate(safeArea / 2, safeArea / 2);\n    ctx.rotate(getRadianAngle(rotation));\n    ctx.translate(-safeArea / 2, -safeArea / 2); */\n    // draw rotated image and store data.\n\n    ctx.drawImage(myImage\n    /* safeArea / 2 - myImage.width * 0.5,\n    safeArea / 2 - myImage.height * 0.5 */\n    );\n    const data = ctx.getImageData(0, 0, safeArea, safeArea); // set canvas width to final desired crop size - this will clear existing context\n\n    /* canvas.width = pixelCrop.width;\n    canvas.height = pixelCrop.height; */\n    // paste generated rotate image with correct offsets for x,y crop values.\n\n    ctx.putImageData(data, 0 - safeArea / 2 + myImage.width * 0.5, 0 - safeArea / 2 + myImage.height * 0.5); // As Base64 string\n    // return canvas.toDataURL(\"image/jpeg\");\n\n    return canvas;\n  };\n\n  const upload = async e => {\n    const canvas = await getCroppedImage(image);\n    const canvasDataUrl = canvas.toDataURL(\"image/jpeg\");\n    const convertedUrltoFile = dataURLtoFile(canvasDataUrl, \"myimage.jpeg\");\n    console.log(convertedUrltoFile);\n    const formData = new FormData();\n    formData.append('myImage', convertedUrltoFile);\n    axios.post('http://localhost:3080/file/uploadimage', formData, {\n      withCredentials: true\n    }).then(response => {\n      console.log(response.data);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const getImage = () => {\n    axios.get(\"http://localhost:3080/file?type=img&id=61a45dee1d898f49a3b1f2da\").then();\n  };\n\n  const onFileChange = event => {\n    if (event.target.files && event.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.readAsDataURL(event.target.files[0]);\n      reader.addEventListener('load', () => {\n        console.log(reader.result);\n        setImage(reader.result);\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form-control\",\n        accept: \"image/*\",\n        type: \"file\",\n        id: \"file\",\n        name: \"file\",\n        onChange: onFileChange,\n        style: {\n          marginBottom: '10px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-primary\",\n        onClick: upload,\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"show-images\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"\",\n          width: \"250\",\n          height: \"250\",\n          alt: \"pic\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-primary mt-3\",\n        onClick: getImage,\n        children: \"Show image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 9\n  }, this);\n}\n\n_s(UploadImage, \"qvAdfQCRoovALirK1B7at+oSULs=\");\n\n_c = UploadImage;\nexport default UploadImage; //http://localhost:3080/file?type=img&id=61a45dee1d898f49a3b1f2da\n//encType=\"multipart/form-data\" action=\"/file/uploadimage\" method=\"POST\" multiple=\"multiple\"\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadImage\");","map":{"version":3,"sources":["/home/tolga/VS Code workspace/Brukth√•nd/secondhand/src/upload-image.js"],"names":["axios","useEffect","useState","UploadImage","createImage","url","Promise","resolve","reject","newImage","Image","addEventListener","error","setAttribute","src","doc","setDoc","image","setImage","getRadianAngle","degreeValue","Math","PI","dataURLtoFile","dataurl","filename","arr","split","mime","match","bstr","atob","n","length","u8arr","Uint8Array","charCodeAt","File","type","getCroppedImage","imageSrc","myImage","rotation","canvas","document","createElement","ctx","getContext","maxSize","max","width","height","safeArea","drawImage","data","getImageData","putImageData","upload","e","canvasDataUrl","toDataURL","convertedUrltoFile","console","log","formData","FormData","append","post","withCredentials","then","response","catch","err","getImage","get","onFileChange","event","target","files","reader","FileReader","readAsDataURL","result","marginBottom"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;AAEA,SAASC,WAAT,GAAsB;AAAA;;AAElB,QAAMC,WAAW,GAAG,OAAOC,GAAP,KAChB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7B,QAAIC,QAAQ,GAAG,IAAIC,KAAJ,EAAf;AACAD,IAAAA,QAAQ,CAACE,gBAAT,CAA0B,MAA1B,EAAkC,MAAMJ,OAAO,CAACE,QAAD,CAA/C;AACAA,IAAAA,QAAQ,CAACE,gBAAT,CAA0B,OAA1B,EAAoCC,KAAD,IAAWJ,MAAM,CAACI,KAAD,CAApD;AACAH,IAAAA,QAAQ,CAACI,YAAT,CAAsB,aAAtB,EAAqC,WAArC,EAJ6B,CAIsB;;AACnDJ,IAAAA,QAAQ,CAACK,GAAT,GAAeT,GAAf;AACH,GAND,CADJ;;AASA,QAAM,CAACU,GAAD,EAAMC,MAAN,IAAgBd,QAAQ,EAA9B;AACA,QAAM,CAACe,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,IAAD,CAAlC;;AAEA,QAAMiB,cAAc,GAAIC,WAAD,IAAiB;AACpC,WAAQA,WAAW,GAAGC,IAAI,CAACC,EAApB,GAA0B,GAAjC;AACH,GAFD;;AAIA,QAAMC,aAAa,GAAG,CAACC,OAAD,EAAUC,QAAV,KAAuB;AACzC,UAAMC,GAAG,GAAGF,OAAO,CAACG,KAAR,CAAc,GAAd,CAAZ;AACA,UAAMC,IAAI,GAAGF,GAAG,CAAC,CAAD,CAAH,CAAOG,KAAP,CAAa,SAAb,EAAwB,CAAxB,CAAb;AACA,UAAMC,IAAI,GAAGC,IAAI,CAACL,GAAG,CAAC,CAAD,CAAJ,CAAjB;AACA,QAAIM,CAAC,GAAGF,IAAI,CAACG,MAAb;AACA,UAAMC,KAAK,GAAG,IAAIC,UAAJ,CAAeH,CAAf,CAAd;;AAEA,WAAOA,CAAC,EAAR,EAAYE,KAAK,CAACF,CAAD,CAAL,GAAWF,IAAI,CAACM,UAAL,CAAgBJ,CAAhB,CAAX;;AAEZ,WAAO,IAAIK,IAAJ,CAAS,CAACH,KAAD,CAAT,EAAkBT,QAAlB,EAA4B;AAAEa,MAAAA,IAAI,EAAEV;AAAR,KAA5B,CAAP;AACH,GAVD;;AAYA,QAAMW,eAAe,GAAG,MAAOC,QAAP,IAAoB;AACxC,UAAMC,OAAO,GAAG,MAAMrC,WAAW,CAACoC,QAAD,CAAjC;AACA,QAAIE,QAAQ,GAAG,CAAf;AACA,UAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACA,UAAMC,GAAG,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAZ;AAEA,UAAMC,OAAO,GAAG3B,IAAI,CAAC4B,GAAL,CAASR,OAAO,CAACS,KAAjB,EAAwBT,OAAO,CAACU,MAAhC,CAAhB,CANwC,CAOxC;;AACA,UAAMC,QAAQ,GAAGJ,OAAjB,CARwC,CAUxC;AACA;;AACAL,IAAAA,MAAM,CAACO,KAAP,GAAeT,OAAO,CAACS,KAAvB;AACAP,IAAAA,MAAM,CAACQ,MAAP,GAAgBV,OAAO,CAACU,MAAxB,CAbwC,CAexC;;AACA;AACR;AACA;AAEQ;;AACAL,IAAAA,GAAG,CAACO,SAAJ,CACIZ;AACA;AACZ;AAHQ;AAQA,UAAMa,IAAI,GAAGR,GAAG,CAACS,YAAJ,CAAiB,CAAjB,EAAoB,CAApB,EAAuBH,QAAvB,EAAiCA,QAAjC,CAAb,CA7BwC,CA+BxC;;AACA;AACR;AAEQ;;AACAN,IAAAA,GAAG,CAACU,YAAJ,CACIF,IADJ,EAEI,IAAIF,QAAQ,GAAG,CAAf,GAAmBX,OAAO,CAACS,KAAR,GAAgB,GAFvC,EAGI,IAAIE,QAAQ,GAAG,CAAf,GAAmBX,OAAO,CAACU,MAAR,GAAiB,GAHxC,EApCwC,CA0CxC;AACA;;AACA,WAAOR,MAAP;AACH,GA7CD;;AA+CA,QAAMc,MAAM,GAAG,MAAOC,CAAP,IAAa;AACxB,UAAMf,MAAM,GAAG,MAAMJ,eAAe,CAACtB,KAAD,CAApC;AACA,UAAM0C,aAAa,GAAGhB,MAAM,CAACiB,SAAP,CAAiB,YAAjB,CAAtB;AACA,UAAMC,kBAAkB,GAAGtC,aAAa,CAACoC,aAAD,EAAgB,cAAhB,CAAxC;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYF,kBAAZ;AAEA,UAAMG,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,SAAhB,EAA2BL,kBAA3B;AAEA7D,IAAAA,KAAK,CAACmE,IAAN,CAAW,wCAAX,EAAqDH,QAArD,EAA+D;AAACI,MAAAA,eAAe,EAAE;AAAlB,KAA/D,EACKC,IADL,CACUC,QAAQ,IAAI;AACdR,MAAAA,OAAO,CAACC,GAAR,CAAYO,QAAQ,CAAChB,IAArB;AACH,KAHL,EAIKiB,KAJL,CAIWC,GAAG,IAAI;AACVV,MAAAA,OAAO,CAACC,GAAR,CAAYS,GAAZ;AACH,KANL;AAOH,GAhBD;;AAkBA,QAAMC,QAAQ,GAAG,MAAM;AACnBzE,IAAAA,KAAK,CAAC0E,GAAN,CAAU,iEAAV,EACKL,IADL;AAEH,GAHD;;AAKA,QAAMM,YAAY,GAAGC,KAAK,IAAI;AAC1B,QAAGA,KAAK,CAACC,MAAN,CAAaC,KAAb,IAAsBF,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmB7C,MAAnB,GAA4B,CAArD,EAAuD;AACnD,YAAM8C,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,MAAAA,MAAM,CAACE,aAAP,CAAqBL,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAArB;AACAC,MAAAA,MAAM,CAACpE,gBAAP,CAAwB,MAAxB,EAAgC,MAAM;AAClCmD,QAAAA,OAAO,CAACC,GAAR,CAAYgB,MAAM,CAACG,MAAnB;AACAhE,QAAAA,QAAQ,CAAC6D,MAAM,CAACG,MAAR,CAAR;AACH,OAHD;AAIH;AACJ,GATD;;AAYA,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,8BACI;AAAO,QAAA,SAAS,EAAC,cAAjB;AAAgC,QAAA,MAAM,EAAC,SAAvC;AAAiD,QAAA,IAAI,EAAC,MAAtD;AAA6D,QAAA,EAAE,EAAC,MAAhE;AAAuE,QAAA,IAAI,EAAC,MAA5E;AAAoF,QAAA,QAAQ,EAAEP,YAA9F;AAA4G,QAAA,KAAK,EAAE;AAACQ,UAAAA,YAAY,EAAE;AAAf;AAAnH;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC,iBAAhC;AAAkD,QAAA,OAAO,EAAE1B,MAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI;AAAA;AAAA;AAAA;AAAA,YALJ,eAMI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,8BACI;AAAA,+BACI;AAAK,UAAA,GAAG,EAAC,EAAT;AAAY,UAAA,KAAK,EAAC,KAAlB;AAAwB,UAAA,MAAM,EAAC,KAA/B;AAAqC,UAAA,GAAG,EAAC;AAAzC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAII;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC,sBAAhC;AAAuD,QAAA,OAAO,EAAEgB,QAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH;;GA/HQtE,W;;KAAAA,W;AAiIT,eAAeA,WAAf,C,CAEA;AACA","sourcesContent":["import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\n\nfunction UploadImage(){\n\n    const createImage = async (url) =>\n        new Promise((resolve, reject) => {\n            var newImage = new Image();\n            newImage.addEventListener(\"load\", () => resolve(newImage));\n            newImage.addEventListener(\"error\", (error) => reject(error));\n            newImage.setAttribute(\"crossOrigin\", \"anonymous\"); // needed to avoid cross-origin issues on CodeSandbox\n            newImage.src = url;\n        });\n\n    const [doc, setDoc] = useState();\n    const [image, setImage] = useState(null);\n\n    const getRadianAngle = (degreeValue) => {\n        return (degreeValue * Math.PI) / 180;\n    }\n\n    const dataURLtoFile = (dataurl, filename) => {\n        const arr = dataurl.split(\",\");\n        const mime = arr[0].match(/:(.*?);/)[1];\n        const bstr = atob(arr[1]);\n        let n = bstr.length;\n        const u8arr = new Uint8Array(n);\n    \n        while (n--) u8arr[n] = bstr.charCodeAt(n);\n    \n        return new File([u8arr], filename, { type: mime });\n    };\n\n    const getCroppedImage = async (imageSrc) => {\n        const myImage = await createImage(imageSrc);\n        var rotation = 0;\n        const canvas = document.createElement(\"canvas\");\n        const ctx = canvas.getContext(\"2d\");\n\n        const maxSize = Math.max(myImage.width, myImage.height);\n        //const safeArea = 2 * ((maxSize / 2) * Math.sqrt(2));\n        const safeArea = maxSize;\n\n        // set each dimensions to double largest dimension to allow for a safe area for the\n        // image to rotate in without being clipped by canvas context\n        canvas.width = myImage.width;\n        canvas.height = myImage.height;\n\n        // translate canvas context to a central location on image to allow rotating around the center.\n        /* ctx.translate(safeArea / 2, safeArea / 2);\n        ctx.rotate(getRadianAngle(rotation));\n        ctx.translate(-safeArea / 2, -safeArea / 2); */\n\n        // draw rotated image and store data.\n        ctx.drawImage(\n            myImage,\n            /* safeArea / 2 - myImage.width * 0.5,\n            safeArea / 2 - myImage.height * 0.5 */\n            \n\n        );\n\n        const data = ctx.getImageData(0, 0, safeArea, safeArea);\n\n        // set canvas width to final desired crop size - this will clear existing context\n        /* canvas.width = pixelCrop.width;\n        canvas.height = pixelCrop.height; */\n\n        // paste generated rotate image with correct offsets for x,y crop values.\n        ctx.putImageData(\n            data,\n            0 - safeArea / 2 + myImage.width * 0.5 ,\n            0 - safeArea / 2 + myImage.height * 0.5 \n        );\n\n        // As Base64 string\n        // return canvas.toDataURL(\"image/jpeg\");\n        return canvas;\n    }\n\n    const upload = async (e) => {\n        const canvas = await getCroppedImage(image);\n        const canvasDataUrl = canvas.toDataURL(\"image/jpeg\");\n        const convertedUrltoFile = dataURLtoFile(canvasDataUrl, \"myimage.jpeg\")\n        console.log(convertedUrltoFile);\n\n        const formData = new FormData();\n        formData.append('myImage', convertedUrltoFile)\n\n        axios.post('http://localhost:3080/file/uploadimage', formData, {withCredentials: true})\n            .then(response => {\n                console.log(response.data);\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    }\n\n    const getImage = () => {\n        axios.get(\"http://localhost:3080/file?type=img&id=61a45dee1d898f49a3b1f2da\")\n            .then()\n    }\n\n    const onFileChange = event => {\n        if(event.target.files && event.target.files.length > 0){\n            const reader = new FileReader();\n            reader.readAsDataURL(event.target.files[0]);\n            reader.addEventListener('load', () => {\n                console.log(reader.result);\n                setImage(reader.result);\n            })\n        }\n    };\n\n    \n    return(\n        <div>\n            <div className=\"upload\">\n                <input className=\"form-control\" accept=\"image/*\" type=\"file\" id=\"file\" name=\"file\"  onChange={onFileChange} style={{marginBottom: '10px'}}></input>\n                <button type=\"button\" className=\"btn btn-primary\" onClick={upload}>Upload</button>\n            </div>\n            <hr/>\n            <div className=\"show-images\">\n                <div>\n                    <img src=\"\" width=\"250\" height=\"250\" alt=\"pic\"/>\n                </div>\n                <button type=\"button\" className=\"btn btn-primary mt-3\" onClick={getImage}>Show image</button>\n            </div>\n        </div>\n    )\n}\n\nexport default UploadImage;\n\n//http://localhost:3080/file?type=img&id=61a45dee1d898f49a3b1f2da\n//encType=\"multipart/form-data\" action=\"/file/uploadimage\" method=\"POST\" multiple=\"multiple\"\n"]},"metadata":{},"sourceType":"module"}