{"ast":null,"code":"var _jsxFileName = \"/home/tolga/VS Code workspace/Brukth\\xE5nd/secondhand/src/upload-image.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction UploadImage() {\n  _s();\n\n  const createImage = async (url) => new Promise((resolve, reject) => {\n    var newImage = new Image();\n    newImage.addEventListener(\"load\", () => resolve(newImage));\n    newImage.addEventListener(\"error\", error => reject(error));\n    newImage.setAttribute(\"crossOrigin\", \"anonymous\"); // needed to avoid cross-origin issues on CodeSandbox\n\n    newImage.src = url;\n  });\n\n  const [image, setImage] = useState(null);\n  const [images, setImages] = useState([]);\n\n  const dataURLtoFile = (dataurl, filename) => {\n    const arr = dataurl.split(\",\");\n    const mime = arr[0].match(/:(.*?);/)[1];\n    const bstr = atob(arr[1]);\n    let n = bstr.length;\n    const u8arr = new Uint8Array(n);\n\n    while (n--) u8arr[n] = bstr.charCodeAt(n);\n\n    return new File([u8arr], filename, {\n      type: mime\n    });\n  };\n\n  const getCroppedImage = async imageSrc => {\n    const myImage = await createImage(imageSrc);\n    const canvas = document.createElement(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    canvas.width = myImage.width;\n    canvas.height = myImage.height; // draw rotated image and store data.\n\n    ctx.drawImage(myImage, 0, 0, myImage.width, myImage.height);\n    const data = ctx.getImageData(0, 0, 100, 100); // paste generated rotate image with correct offsets for x,y crop values.\n\n    ctx.putImageData(data, 150, 0, 0, 0, 0, 0); // As Base64 string\n    // return canvas.toDataURL(\"image/jpeg\");\n\n    return canvas;\n  };\n\n  const upload = async e => {\n    const canvas = await getCroppedImage(image);\n    const canvasDataUrl = canvas.toDataURL(\"image/jpeg\");\n    const convertedUrltoFile = dataURLtoFile(canvasDataUrl, \"myimage.jpeg\");\n    console.log(convertedUrltoFile);\n    const formData = new FormData();\n    formData.append('myImage', convertedUrltoFile);\n    axios.post('http://localhost:3080/file/uploadimage', formData, {\n      withCredentials: true\n    }).then(response => {\n      console.log(response.data);\n      setImages(response.data.images);\n      console.log(images);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const getImages = () => {\n    axios.get(\"http://localhost:3080/file/ahmet/annonces/annonce1\").then(response => {\n      console.log(response);\n      setImages(response.data.images);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const onFileChange = event => {\n    if (event.target.files && event.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.readAsDataURL(event.target.files[0]);\n      reader.addEventListener('load', () => {\n        console.log(reader.result);\n        setImage(reader.result);\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form-control\",\n        accept: \"image/*\",\n        type: \"file\",\n        id: \"file\",\n        name: \"file\",\n        onChange: onFileChange,\n        style: {\n          marginBottom: '10px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-primary\",\n        onClick: upload,\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"show-images\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: images.length > 0 ? images.map(element => {\n          return /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `http://localhost:3080/file/image/${element.Key}`,\n            width: \"250\",\n            height: \"250\",\n            alt: \"pic\",\n            style: {\n              margin: 5\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 29\n          }, this);\n        }) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-primary mt-3\",\n        onClick: getImages,\n        children: \"Show images\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n}\n\n_s(UploadImage, \"laVcsH2w9irjhYFvOPEbPzO0djQ=\");\n\n_c = UploadImage;\nexport default UploadImage; //http://localhost:3080/file?type=img&id=61a45dee1d898f49a3b1f2da\n//encType=\"multipart/form-data\" action=\"/file/uploadimage\" method=\"POST\" multiple=\"multiple\"\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadImage\");","map":{"version":3,"sources":["/home/tolga/VS Code workspace/Brukth√•nd/secondhand/src/upload-image.js"],"names":["axios","useState","UploadImage","createImage","url","Promise","resolve","reject","newImage","Image","addEventListener","error","setAttribute","src","image","setImage","images","setImages","dataURLtoFile","dataurl","filename","arr","split","mime","match","bstr","atob","n","length","u8arr","Uint8Array","charCodeAt","File","type","getCroppedImage","imageSrc","myImage","canvas","document","createElement","ctx","getContext","width","height","drawImage","data","getImageData","putImageData","upload","e","canvasDataUrl","toDataURL","convertedUrltoFile","console","log","formData","FormData","append","post","withCredentials","then","response","catch","err","getImages","get","onFileChange","event","target","files","reader","FileReader","readAsDataURL","result","marginBottom","map","element","Key","margin"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { useState } from \"react\";\n\nfunction UploadImage(){\n\n    const createImage = async (url) =>\n        new Promise((resolve, reject) => {\n            var newImage = new Image();\n            newImage.addEventListener(\"load\", () => resolve(newImage));\n            newImage.addEventListener(\"error\", (error) => reject(error));\n            newImage.setAttribute(\"crossOrigin\", \"anonymous\"); // needed to avoid cross-origin issues on CodeSandbox\n            newImage.src = url;\n        });\n\n    const [image, setImage] = useState(null);\n    const [images, setImages] = useState([]);\n\n    const dataURLtoFile = (dataurl, filename) => {\n        const arr = dataurl.split(\",\");\n        const mime = arr[0].match(/:(.*?);/)[1];\n        const bstr = atob(arr[1]);\n        let n = bstr.length;\n        const u8arr = new Uint8Array(n);\n    \n        while (n--) u8arr[n] = bstr.charCodeAt(n);\n    \n        return new File([u8arr], filename, { type: mime });\n    };\n\n    const getCroppedImage = async (imageSrc) => {\n        const myImage = await createImage(imageSrc);\n        const canvas = document.createElement(\"canvas\");\n        const ctx = canvas.getContext(\"2d\");\n\n        canvas.width = myImage.width;\n        canvas.height = myImage.height;\n\n        // draw rotated image and store data.\n        ctx.drawImage(\n            myImage,\n            0, 0, myImage.width, myImage.height\n        );\n\n        const data = ctx.getImageData(0, 0, 100,100);\n\n        // paste generated rotate image with correct offsets for x,y crop values.\n        ctx.putImageData(\n            data, 150, 0, 0, 0, 0, 0\n        );\n\n        // As Base64 string\n        // return canvas.toDataURL(\"image/jpeg\");\n        return canvas;\n    }\n\n    const upload = async (e) => {\n        const canvas = await getCroppedImage(image);\n        const canvasDataUrl = canvas.toDataURL(\"image/jpeg\");\n        const convertedUrltoFile = dataURLtoFile(canvasDataUrl, \"myimage.jpeg\")\n        console.log(convertedUrltoFile);\n\n        const formData = new FormData();\n        formData.append('myImage', convertedUrltoFile)\n\n        axios.post('http://localhost:3080/file/uploadimage', formData, {withCredentials: true})\n            .then(response => {\n                console.log(response.data);\n                setImages(response.data.images);\n                console.log(images)\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    }\n\n    const getImages = () => {\n        axios.get(\"http://localhost:3080/file/ahmet/annonces/annonce1\")\n            .then(response => {\n                console.log(response)\n                setImages(response.data.images)\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    }\n\n    const onFileChange = event => {\n        if(event.target.files && event.target.files.length > 0){\n            const reader = new FileReader();\n            reader.readAsDataURL(event.target.files[0]);\n            reader.addEventListener('load', () => {\n                console.log(reader.result);\n                setImage(reader.result);\n            })\n        }\n    };\n\n    \n    return(\n        <div>\n            <div className=\"upload\">\n                <input className=\"form-control\" accept=\"image/*\" type=\"file\" id=\"file\" name=\"file\"  onChange={onFileChange} style={{marginBottom: '10px'}}></input>\n                <button type=\"button\" className=\"btn btn-primary\" onClick={upload}>Upload</button>\n            </div>\n            <hr/>\n            <div className=\"show-images\">\n                <div>\n                { images.length > 0 ?\n                    images.map(element => {\n                        return(\n                            <img src={`http://localhost:3080/file/image/${element.Key}`} width=\"250\" height=\"250\" alt=\"pic\" style={{margin: 5}}/>\n                        )\n                    })\n                    : \n                    null\n                }\n                </div>\n                \n                <button type=\"button\" className=\"btn btn-primary mt-3\" onClick={getImages}>Show images</button>\n            </div>\n        </div>\n    )\n}\n\nexport default UploadImage;\n\n//http://localhost:3080/file?type=img&id=61a45dee1d898f49a3b1f2da\n//encType=\"multipart/form-data\" action=\"/file/uploadimage\" method=\"POST\" multiple=\"multiple\"\n"]},"metadata":{},"sourceType":"module"}