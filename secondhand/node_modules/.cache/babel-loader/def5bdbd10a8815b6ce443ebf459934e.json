{"ast":null,"code":"import { modelNames } from \"mongoose\";\n\nconst createImage = async (url) => new Promise((resolve, reject) => {\n  var newImage = new Image();\n  newImage.addEventListener(\"load\", () => resolve(newImage));\n  newImage.addEventListener(\"error\", error => reject(error));\n  newImage.setAttribute(\"crossOrigin\", \"anonymous\"); // needed to avoid cross-origin issues on CodeSandbox\n\n  newImage.src = url;\n});\n\nconst getCroppedImage = async imageSrc => {\n  const myImage = await createImage(imageSrc);\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\");\n  canvas.width = myImage.width;\n  canvas.height = myImage.height; // draw rotated image and store data.\n\n  ctx.drawImage(myImage, 0, 0, myImage.width, myImage.height);\n  const data = ctx.getImageData(0, 0, 100, 100); // paste generated rotate image with correct offsets for x,y crop values.\n\n  ctx.putImageData(data, 150, 0, 0, 0, 0, 0); // As Base64 string\n  // return canvas.toDataURL(\"image/jpeg\");\n\n  return canvas;\n};\n\nmodule.exports = {\n  createImage,\n  getCroppedImage\n};","map":{"version":3,"sources":["/home/tolga/VS Code workspace/BrukthÃ¥nd/secondhand/src/utils/cropImage.js"],"names":["modelNames","createImage","url","Promise","resolve","reject","newImage","Image","addEventListener","error","setAttribute","src","getCroppedImage","imageSrc","myImage","canvas","document","createElement","ctx","getContext","width","height","drawImage","data","getImageData","putImageData","module","exports"],"mappings":"AAAA,SAASA,UAAT,QAA2B,UAA3B;;AAEA,MAAMC,WAAW,GAAG,OAAOC,GAAP,KAChB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7B,MAAIC,QAAQ,GAAG,IAAIC,KAAJ,EAAf;AACAD,EAAAA,QAAQ,CAACE,gBAAT,CAA0B,MAA1B,EAAkC,MAAMJ,OAAO,CAACE,QAAD,CAA/C;AACAA,EAAAA,QAAQ,CAACE,gBAAT,CAA0B,OAA1B,EAAoCC,KAAD,IAAWJ,MAAM,CAACI,KAAD,CAApD;AACAH,EAAAA,QAAQ,CAACI,YAAT,CAAsB,aAAtB,EAAqC,WAArC,EAJ6B,CAIsB;;AACnDJ,EAAAA,QAAQ,CAACK,GAAT,GAAeT,GAAf;AACH,CAND,CADJ;;AAUA,MAAMU,eAAe,GAAG,MAAOC,QAAP,IAAoB;AACxC,QAAMC,OAAO,GAAG,MAAMb,WAAW,CAACY,QAAD,CAAjC;AACA,QAAME,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACA,QAAMC,GAAG,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAZ;AAEAJ,EAAAA,MAAM,CAACK,KAAP,GAAeN,OAAO,CAACM,KAAvB;AACAL,EAAAA,MAAM,CAACM,MAAP,GAAgBP,OAAO,CAACO,MAAxB,CANwC,CAQxC;;AACAH,EAAAA,GAAG,CAACI,SAAJ,CACIR,OADJ,EAEI,CAFJ,EAEO,CAFP,EAEUA,OAAO,CAACM,KAFlB,EAEyBN,OAAO,CAACO,MAFjC;AAKA,QAAME,IAAI,GAAGL,GAAG,CAACM,YAAJ,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,GAAvB,EAA2B,GAA3B,CAAb,CAdwC,CAgBxC;;AACAN,EAAAA,GAAG,CAACO,YAAJ,CACIF,IADJ,EACU,GADV,EACe,CADf,EACkB,CADlB,EACqB,CADrB,EACwB,CADxB,EAC2B,CAD3B,EAjBwC,CAqBxC;AACA;;AACA,SAAOR,MAAP;AACH,CAxBD;;AA0BAW,MAAM,CAACC,OAAP,GAAiB;AAAC1B,EAAAA,WAAD;AAAcW,EAAAA;AAAd,CAAjB","sourcesContent":["import { modelNames } from \"mongoose\";\n\nconst createImage = async (url) =>\n    new Promise((resolve, reject) => {\n        var newImage = new Image();\n        newImage.addEventListener(\"load\", () => resolve(newImage));\n        newImage.addEventListener(\"error\", (error) => reject(error));\n        newImage.setAttribute(\"crossOrigin\", \"anonymous\"); // needed to avoid cross-origin issues on CodeSandbox\n        newImage.src = url;\n    });\n\n\nconst getCroppedImage = async (imageSrc) => {\n    const myImage = await createImage(imageSrc);\n    const canvas = document.createElement(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n\n    canvas.width = myImage.width;\n    canvas.height = myImage.height;\n\n    // draw rotated image and store data.\n    ctx.drawImage(\n        myImage,\n        0, 0, myImage.width, myImage.height\n    );\n\n    const data = ctx.getImageData(0, 0, 100,100);\n\n    // paste generated rotate image with correct offsets for x,y crop values.\n    ctx.putImageData(\n        data, 150, 0, 0, 0, 0, 0\n    );\n\n    // As Base64 string\n    // return canvas.toDataURL(\"image/jpeg\");\n    return canvas;\n}\n\nmodule.exports = {createImage, getCroppedImage}"]},"metadata":{},"sourceType":"module"}