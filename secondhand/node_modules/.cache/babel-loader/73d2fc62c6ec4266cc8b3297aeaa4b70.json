{"ast":null,"code":"var _jsxFileName = \"/home/tolga/VS Code workspace/Brukth\\xE5nd/secondhand/src/upload-image.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction UploadImage() {\n  _s();\n\n  const createImage = async (url) => new Promise((resolve, reject) => {\n    var image = new Image();\n    image.addEventListener(\"load\", () => resolve(image));\n    image.addEventListener(\"error\", error => reject(error));\n    image.setAttribute(\"crossOrigin\", \"anonymous\"); // needed to avoid cross-origin issues on CodeSandbox\n\n    image.src = url;\n  });\n\n  const [doc, setDoc] = useState();\n  const [image, setImage] = useState(null);\n\n  const getRadianAngle = degreeValue => {\n    return degreeValue * Math.PI / 180;\n  };\n\n  const upload = async e => {\n    var rotation = 0;\n    const myImage = await createImage(image);\n    const canvas = document.createElement(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    const maxSize = Math.max(image.width, image.height);\n    const safeArea = 2 * (maxSize / 2 * Math.sqrt(2)); // set each dimensions to double largest dimension to allow for a safe area for the\n    // image to rotate in without being clipped by canvas context\n\n    canvas.width = safeArea;\n    canvas.height = safeArea; // translate canvas context to a central location on image to allow rotating around the center.\n\n    ctx.translate(safeArea / 2, safeArea / 2);\n    ctx.rotate(getRadianAngle(rotation));\n    ctx.translate(-safeArea / 2, -safeArea / 2); // draw rotated image and store data.\n\n    ctx.drawImage(image, safeArea / 2 - image.width * 0.5, safeArea / 2 - image.height * 0.5);\n    const data = ctx.getImageData(0, 0, safeArea, safeArea); // set canvas width to final desired crop size - this will clear existing context\n\n    /* canvas.width = pixelCrop.width;\n    canvas.height = pixelCrop.height; */\n    // paste generated rotate image with correct offsets for x,y crop values.\n\n    ctx.putImageData(data, 0 - safeArea / 2 + image.width * 0.5, 0 - safeArea / 2 + image.height * 0.5); // As Base64 string\n    // return canvas.toDataURL(\"image/jpeg\");\n\n    return canvas;\n  };\n\n  const getImage = () => {\n    axios.get(\"http://localhost:3080/file?type=img&id=61a45dee1d898f49a3b1f2da\").then();\n  };\n\n  const onFileChange = event => {\n    if (event.target.files && event.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.readAsDataURL(event.target.files[0]);\n      reader.addEventListener('load', () => {\n        console.log(reader.result);\n        setImage(reader.result);\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form-control\",\n        accept: \"image/*\",\n        type: \"file\",\n        id: \"file\",\n        name: \"file\",\n        onChange: onFileChange,\n        style: {\n          marginBottom: '10px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-primary\",\n        onClick: upload,\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"show-images\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"\",\n          width: \"250\",\n          height: \"250\",\n          alt: \"pic\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-primary mt-3\",\n        onClick: getImage,\n        children: \"Show image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n}\n\n_s(UploadImage, \"qvAdfQCRoovALirK1B7at+oSULs=\");\n\n_c = UploadImage;\nexport default UploadImage; //http://localhost:3080/file?type=img&id=61a45dee1d898f49a3b1f2da\n//encType=\"multipart/form-data\" action=\"/file/uploadimage\" method=\"POST\" multiple=\"multiple\"\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadImage\");","map":{"version":3,"sources":["/home/tolga/VS Code workspace/BrukthÃ¥nd/secondhand/src/upload-image.js"],"names":["axios","useEffect","useState","UploadImage","createImage","url","Promise","resolve","reject","image","Image","addEventListener","error","setAttribute","src","doc","setDoc","setImage","getRadianAngle","degreeValue","Math","PI","upload","e","rotation","myImage","canvas","document","createElement","ctx","getContext","maxSize","max","width","height","safeArea","sqrt","translate","rotate","drawImage","data","getImageData","putImageData","getImage","get","then","onFileChange","event","target","files","length","reader","FileReader","readAsDataURL","console","log","result","marginBottom"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\n\nfunction UploadImage(){\n\n    const createImage = async (url) =>\n        new Promise((resolve, reject) => {\n            var image = new Image();\n            image.addEventListener(\"load\", () => resolve(image));\n            image.addEventListener(\"error\", (error) => reject(error));\n            image.setAttribute(\"crossOrigin\", \"anonymous\"); // needed to avoid cross-origin issues on CodeSandbox\n            image.src = url;\n        });\n\n    const [doc, setDoc] = useState();\n    const [image, setImage] = useState(null);\n\n    const getRadianAngle = (degreeValue) => {\n        return (degreeValue * Math.PI) / 180;\n    }\n\n    const upload = async (e) => {\n        var rotation = 0;\n        const myImage = await createImage(image);\n        const canvas = document.createElement(\"canvas\");\n        const ctx = canvas.getContext(\"2d\");\n\n        const maxSize = Math.max(image.width, image.height);\n        const safeArea = 2 * ((maxSize / 2) * Math.sqrt(2));\n\n        // set each dimensions to double largest dimension to allow for a safe area for the\n        // image to rotate in without being clipped by canvas context\n        canvas.width = safeArea;\n        canvas.height = safeArea;\n\n        // translate canvas context to a central location on image to allow rotating around the center.\n        ctx.translate(safeArea / 2, safeArea / 2);\n        ctx.rotate(getRadianAngle(rotation));\n        ctx.translate(-safeArea / 2, -safeArea / 2);\n\n        // draw rotated image and store data.\n        ctx.drawImage(\n            image,\n            safeArea / 2 - image.width * 0.5,\n            safeArea / 2 - image.height * 0.5\n        );\n\n        const data = ctx.getImageData(0, 0, safeArea, safeArea);\n\n        // set canvas width to final desired crop size - this will clear existing context\n        /* canvas.width = pixelCrop.width;\n        canvas.height = pixelCrop.height; */\n\n        // paste generated rotate image with correct offsets for x,y crop values.\n        ctx.putImageData(\n            data,\n            0 - safeArea / 2 + image.width * 0.5 ,\n            0 - safeArea / 2 + image.height * 0.5 \n        );\n\n        // As Base64 string\n        // return canvas.toDataURL(\"image/jpeg\");\n        return canvas;\n    }\n\n    const getImage = () => {\n        axios.get(\"http://localhost:3080/file?type=img&id=61a45dee1d898f49a3b1f2da\")\n            .then()\n    }\n\n    const onFileChange = event => {\n        if(event.target.files && event.target.files.length > 0){\n            const reader = new FileReader();\n            reader.readAsDataURL(event.target.files[0]);\n            reader.addEventListener('load', () => {\n                console.log(reader.result);\n                setImage(reader.result);\n            })\n        }\n    };\n\n    \n    return(\n        <div>\n            <div className=\"upload\">\n                <input className=\"form-control\" accept=\"image/*\" type=\"file\" id=\"file\" name=\"file\"  onChange={onFileChange} style={{marginBottom: '10px'}}></input>\n                <button type=\"button\" className=\"btn btn-primary\" onClick={upload}>Upload</button>\n            </div>\n            <hr/>\n            <div className=\"show-images\">\n                <div>\n                    <img src=\"\" width=\"250\" height=\"250\" alt=\"pic\"/>\n                </div>\n                <button type=\"button\" className=\"btn btn-primary mt-3\" onClick={getImage}>Show image</button>\n            </div>\n        </div>\n    )\n}\n\nexport default UploadImage;\n\n//http://localhost:3080/file?type=img&id=61a45dee1d898f49a3b1f2da\n//encType=\"multipart/form-data\" action=\"/file/uploadimage\" method=\"POST\" multiple=\"multiple\"\n"]},"metadata":{},"sourceType":"module"}