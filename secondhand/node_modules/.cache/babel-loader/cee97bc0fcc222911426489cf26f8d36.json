{"ast":null,"code":"var _jsxFileName = \"/home/tolga/VS Code workspace/Brukth\\xE5nd/secondhand/src/Pages/SearchedResultPage/SearchResult.js\";\nimport React from \"react\";\nimport \"./SearchResult.css\";\nimport ProductCard from \"../../Component/ProductCard/ProductCard.js\";\nimport { instanceAxs } from \"../../api/Api\"; // import Date from \"./FilterComponents/Date\";\n\nimport Price from \"./FilterComponents/Price\";\nimport Status from \"./FilterComponents/Status\";\nimport Tags from \"./FilterComponents/Tags.js\";\n/* \r\nfiltersWithMultipleParams = [\"status\",\"location\"];\r\nfilter = {key: 'price_max', value:89000 default:90000}, 'status': 'used new'}\r\ntag = [\r\n{key: \"statusUsed\",value: \"Used\", filterKey: 'status', filterValue:'used'}, \r\n{key: \"statusNew\", value: \"New\", filterKey: 'status', filterValue: 'new'},\r\n{key: \"maxPrice\", value: \"til 1800\", filterKey: 'price_max', filterValue: 1800}\r\n]\r\n\r\naddFilter(filterKey, filterValue, tagKey, tagValue){\r\n  filter = {filterKey, filterValue}\r\n  addTag(filterKey, filterValue, tagKey, tagValue)\r\n}\r\nremoveFilter(filterKey, filterValue){\r\n  var filterObject = filter.find(filterKey);\r\n  if(filtersWithMultipleparams[filterObject] !== -1){\r\n    remove(filterObject.value.filterValue)\r\n    if(filterObject.value === ''){\r\n      remove(filterObject)\r\n    }\r\n  } else {\r\n    remove(filterObject)\r\n  }\r\n}\r\naddTag(filterKey, filterValue, tagKey, tagValue){\r\n  tag = {key: tagKey, value: tagValue, filterKey, filterValue}\r\n}\r\nremoveTag(tagKey,filterKey, filterValue){\r\n  tag.remove(tagKey)\r\n  this.removeFilter(filterKey, filterValue)\r\n}\r\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass SearchResult extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setSortingCategory = e => {\n      var sorting = e.target.value;\n      this.setFilter(\"order\", sorting, sorting);\n    };\n\n    this.getFiltersOnMount = () => {\n      let urlParams = this.state.urlParams;\n      var params = {};\n\n      for (const [key, value] of urlParams) {\n        params[key] = value; // console.log({ key, value });\n      }\n\n      this.setState({\n        filters: params\n      });\n      return params;\n    };\n\n    this.getTags = () => {\n      var filters = this.state.filters;\n      var tags = [];\n\n      for (const filter of filters) {\n        if (filter.tagKey !== undefined) {\n          var tag = {\n            key: filter.tagKey,\n            value: filter.tagValue,\n            queryKey: filter.queryKey,\n            queryValue: filter.queryValue\n          };\n          tags.push(tag);\n        }\n      }\n\n      this.setState({\n        tagArray: tags\n      });\n      return tags;\n    };\n\n    this.makeSearch = () => {\n      let filters = this.state.filters;\n      var queryString = \"\";\n\n      for (const filter of filters) {\n        queryString += `${filter.queryKey}=${filter.queryValue}&`;\n      }\n      /* Object.entries(filters).forEach(\r\n        ([key, value]) => (queryString += `${key}=${value}&`)\r\n      ); */\n\n\n      if (queryString[queryString.length - 1] === \"&\") queryString = queryString.slice(0, queryString.length - 1);\n      let query = `/search?${queryString}`;\n      instanceAxs.get(query).then(response => {\n        // console.log(\"Search response\", response);\n        if (response.data.status) {\n          var returnedItems = response.data.items;\n          this.setState({\n            items: returnedItems,\n            resultCount: returnedItems.length\n          });\n          window.history.pushState(\"page2\", \"seach made\", query);\n          console.log(\"get tags\", this.getTags());\n        } else {\n          return console.log(response.data.message);\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.setFilter = (queryKey, queryValue, tagKey, tagValue) => {\n      var queryFilters = this.state.filters;\n      console.log(queryFilters);\n      var multipleQueryFilters = this.state.filtersWithMultipleQueries;\n      var filter = queryFilters[0];\n      /* var index = queryFilters.indexOf(filter);\r\n       \r\n      if(filter === null || filter === undefined){\r\n       var newFilter = {\r\n         queryKey: queryKey,\r\n         queryValue: queryValue,\r\n         tagKey: tagKey,\r\n         tagValue: tagValue\r\n       }\r\n         queryFilters.push(newFilter)      \r\n         this.setState({\r\n         filters: queryFilters\r\n       });\r\n         return;\r\n      }\r\n       if(multipleQueryFilters.includes(queryKey,0)){\r\n       var qValue = filter.queryValue;\r\n       if(qValue === undefined || qValue === null) qValue = '';\r\n         if(!qValue.includes(queryValue)) qValue += \" \" + queryValue;\r\n       qValue = qValue.trim();\r\n         filter.queryValue = qValue\r\n       queryFilters[index] = filter;\r\n       } else {\r\n       console.log(filter)\r\n       filter.queryValue = queryValue\r\n       filter.tagValue = tagValue\r\n       queryFilters[index] = filter;\r\n       // this.getTags();\r\n      }\r\n      this.setState({\r\n       filters: queryFilters\r\n      })\r\n      console.log(\"query filters\",queryFilters) */\n\n      /* if (filter === \"status\") {\r\n        let val = parameters[\"status\"];\r\n        if (val === undefined || val === null) val = \"\";\r\n        if (!val.includes(queryValue)) val += \" \" + queryValue;\r\n        val = val.trim();\r\n        parameters[\"status\"] = val;\r\n        this.addFilterTag(tagKey, tagValue, filter, queryValue);\r\n        this.setState({\r\n          filters: parameters,\r\n        });\r\n      } else {\r\n        parameters[filter] = queryValue;\r\n        this.addFilterTag(tagKey, tagValue, filter, queryValue);\r\n        this.setState({\r\n          filters: parameters,\r\n        });\r\n      } */\n    };\n\n    this.removeFilter = (filter, queryValue) => {// remove a filter completely or erase a prop of it\n\n      /* var queryFilters = this.state.filters;\r\n       var multipleQueryFilters = this.state.filtersWithMultipleQueries;\r\n       var qValue = queryValue || undefined;\r\n         if(multipleQueryFilters.includes(filter)){\r\n         if(queryFilters[filter] !== undefined && queryFilters[filter] !== null && qValue !== undefined){\r\n             var qFilter = queryFilters[filter];\r\n           var newQueryFilter = String(qFilter).replace(qValue, '');\r\n           newQueryFilter = newQueryFilter.trim();\r\n           queryFilters[filter] = newQueryFilter;\r\n           if(queryFilters[filter] === '') {\r\n             delete queryFilters[filter]; \r\n           } \r\n         }\r\n       } else {\r\n         if(queryFilters[filter] !== undefined && queryFilters[filter] !== null) {\r\n           delete queryFilters[filter];\r\n           // this.removeTag(\"\",filter)\r\n         }\r\n       }\r\n       this.setState({\r\n         filters:queryFilters\r\n       }) \r\n       var tagArray = this.state.tagArray;\r\n           let obj = tagArray.find((x) => x.queryValue === queryValue);\r\n           if(obj !== undefined){\r\n             console.log(\"obj\")\r\n             let index = tagArray.indexOf(obj);\r\n             tagArray.splice(index, 1);\r\n             this.setState({ tagArray });\r\n           } */\n      // this.removeTag(\"\",filter)\n\n      /* var prop = property || undefined;\r\n      var params = this.state.filters;\r\n      if (filterOrProp === \"prop\") {\r\n        if (\r\n          params[filter] !== undefined &&\r\n          params[filter] !== null &&\r\n          prop !== undefined\r\n        ) {\r\n          let parameter = params[filter];\r\n          console.log(\"parameter\", parameter)\r\n          let newparameter = String(parameter).replace(prop, \"\");\r\n          newparameter = newparameter.trim();\r\n          console.log(\"new parameter\", newparameter);\r\n          params[filter] = newparameter;\r\n          if (params[filter] === \"\") delete this.state.filters[filter];\r\n          console.log(this.state.filters);\r\n        }\r\n      } else {\r\n        if (params[filter] !== undefined && params[filter] !== null) {\r\n          delete this.state.filters[filter];\r\n          console.log(this.state.filters);\r\n        }\r\n      } */\n    };\n\n    this.removeTag = (key, queryKey) => {\n      /* var tagArray = this.state.tagArray;\r\n      console.log(\"tagarray\", tagArray)\r\n      var qKey = queryKey || undefined;\r\n      let obj = tagArray.find((x) => x.key === key);\r\n      console.log(\"object\",obj)\r\n      if(obj !== undefined){\r\n        let index = tagArray.indexOf(obj);\r\n        tagArray.splice(index, 1);\r\n        this.setState({ tagArray });\r\n        this.removeFilter(obj.queryKey, obj.queryValue);\r\n      }  */\n      // if(qKey !== undefined) this.removeFilter(qKey);\n      //  this.makeSearch();\n    };\n\n    this.removeAllFilters = () => {\n      /*     var filterObj = this.state.filters;\r\n          filterObj = Object.fromEntries(\r\n            Object.entries(filterObj).filter(([key]) => key === \"q\")\r\n          ); // filter all  params except for \"q\" and convert the returned array back to object\r\n          this.setState({\r\n            tagArray: [],\r\n            filters: filterObj,\r\n          });\r\n          console.log(this.state.filters); */\n    };\n\n    this.state = {\n      items: [],\n      filtersWithMultipleQueries: [\"status\", \"location\"],\n      resultCount: 0,\n      tagArray: [],\n      urlParams: new URLSearchParams(props.location.search),\n      filters: [{\n        queryKey: 'q',\n        queryValue: new URLSearchParams(props.location.search).get('q')\n      }],\n      minAndMaxPrice: undefined\n    };\n  }\n\n  componentDidMount() {\n    let params = this.getFiltersOnMount();\n    var queryString = \"\";\n    Object.entries(params).forEach(([key, value]) => queryString += `${key}=${value}&`);\n    if (queryString[queryString.length - 1] === \"&\") queryString = queryString.slice(0, queryString.length - 1);\n    let query = `/search?${queryString}`;\n    instanceAxs.get(query).then(response => {\n      // console.log(\"Search response\", response);\n      var minPrice = response.data.additional.minPrice;\n      var maxPrice = response.data.additional.maxPrice;\n\n      if (response.data.status) {\n        var returnedItems = response.data.items;\n        this.setState({\n          items: returnedItems,\n          resultCount: returnedItems.length,\n          minAndMaxPrice: {\n            minPrice: minPrice,\n            maxPrice: maxPrice\n          }\n        });\n        this.props.history.push(`/search?${queryString}`);\n      } else {\n        return console.log(response.data.message);\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-fluid searchResultPageContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"searchFilterComponents\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          onClick: this.makeSearch,\n          children: \"Bruk Endringer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary \",\n          onClick: () => console.log(this.state.filters),\n          children: \"Lagre S\\xF8k\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-danger\",\n          onClick: this.removeAllFilters,\n          children: \"Fjerne Filtre\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 11\n        }, this), this.state.minAndMaxPrice !== undefined && /*#__PURE__*/_jsxDEV(Price, {\n          setfilter: this.setFilter,\n          removeTag: this.removeTag,\n          priceObject: this.state.minAndMaxPrice,\n          priceState: {\n            priceMin: this.state.filters[\"price_min\"],\n            priceMax: this.state.filters[\"price_max\"]\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Status, {\n          setfilter: this.setFilter,\n          removeFilter: this.removeFilter,\n          checkedState: this.state.filters[\"status\"]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"searchResults\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"searchResults_Info\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"searchResults_Order \",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                margin: 0\n              },\n              children: [this.state.resultCount, \" treff\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                className: \"form-control\",\n                style: {\n                  width: 200\n                },\n                name: \"cars\",\n                id: \"cars\",\n                onChange: this.setSortingCategory,\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"published\",\n                  children: \"Publisert\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 392,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"price_desc\",\n                  children: \"Pris lav til h\\xF8y\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 393,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"price_asc\",\n                  children: \"Pris h\\xF8y til lav\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 394,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 385,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 384,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"filterTagsContainer\",\n            children: this.state.tagArray.map(tag => {\n              return /*#__PURE__*/_jsxDEV(Tags, {\n                tag: tag,\n                removeTag: this.removeTag\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 401,\n                columnNumber: 24\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"searchResults_Items\",\n          children: this.state.items.map((item, index) => {\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"itemCol\",\n                children: /*#__PURE__*/_jsxDEV(ProductCard, {\n                  img: item.annonce.images,\n                  price: item.annonce.price,\n                  name: item.annonce.title,\n                  id: item.annonce._id\n                }, item.annonce._id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 410,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 409,\n                columnNumber: 19\n              }, this)\n            }, void 0, false);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nPrice.defaultProps = {\n  priceObject: {\n    minPrice: 0,\n    maxPrice: 50\n  }\n};\nexport default SearchResult;","map":{"version":3,"sources":["/home/tolga/VS Code workspace/Brukthånd/secondhand/src/Pages/SearchedResultPage/SearchResult.js"],"names":["React","ProductCard","instanceAxs","Price","Status","Tags","SearchResult","Component","constructor","props","setSortingCategory","e","sorting","target","value","setFilter","getFiltersOnMount","urlParams","state","params","key","setState","filters","getTags","tags","filter","tagKey","undefined","tag","tagValue","queryKey","queryValue","push","tagArray","makeSearch","queryString","length","slice","query","get","then","response","data","status","returnedItems","items","resultCount","window","history","pushState","console","log","message","catch","err","queryFilters","multipleQueryFilters","filtersWithMultipleQueries","removeFilter","removeTag","removeAllFilters","URLSearchParams","location","search","minAndMaxPrice","componentDidMount","Object","entries","forEach","minPrice","additional","maxPrice","render","priceMin","priceMax","margin","width","map","item","index","annonce","images","price","title","_id","defaultProps","priceObject"],"mappings":"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A,OAAO,CAACC,GAAR,CAAYG,GAAZ;AACD,OAlBH;AAmBD,KAzFkB;;AAAA,SA2FnBvC,SA3FmB,GA2FP,CAACe,QAAD,EAAWC,UAAX,EAAuBL,MAAvB,EAA+BG,QAA/B,KAA4C;AAErD,UAAI0B,YAAY,GAAG,KAAKrC,KAAL,CAAWI,OAA9B;AACJ4B,MAAAA,OAAO,CAACC,GAAR,CAAYI,YAAZ;AACC,UAAIC,oBAAoB,GAAG,KAAKtC,KAAL,CAAWuC,0BAAtC;AACE,UAAIhC,MAAM,GAAG8B,YAAY,CAAC,CAAD,CAAzB;AACC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAUI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG,KA5JkB;;AAAA,SAuLnBG,YAvLmB,GAuLJ,CAACjC,MAAD,EAASM,UAAT,KAAwB,CACrC;;AACD;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGI;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG,KAjPkB;;AAAA,SAmPnB4B,SAnPmB,GAmPP,CAACvC,GAAD,EAAMU,QAAN,KAAmB;AAC7B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AAEA;AACD,KAlQkB;;AAAA,SAoQnB8B,gBApQmB,GAoQA,MAAM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG,KA9QkB;;AAEjB,SAAK1C,KAAL,GAAa;AACX2B,MAAAA,KAAK,EAAE,E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","sourcesContent":["import React from \"react\";\r\nimport \"./SearchResult.css\";\r\nimport ProductCard from \"../../Component/ProductCard/ProductCard.js\";\r\nimport { instanceAxs } from \"../../api/Api\";\r\n// import Date from \"./FilterComponents/Date\";\r\nimport Price from \"./FilterComponents/Price\";\r\nimport Status from \"./FilterComponents/Status\";\r\nimport Tags from \"./FilterComponents/Tags.js\";\r\n/* \r\nfiltersWithMultipleParams = [\"status\",\"location\"];\r\nfilter = {key: 'price_max', value:89000 default:90000}, 'status': 'used new'}\r\ntag = [\r\n{key: \"statusUsed\",value: \"Used\", filterKey: 'status', filterValue:'used'}, \r\n{key: \"statusNew\", value: \"New\", filterKey: 'status', filterValue: 'new'},\r\n{key: \"maxPrice\", value: \"til 1800\", filterKey: 'price_max', filterValue: 1800}\r\n]\r\n\r\naddFilter(filterKey, filterValue, tagKey, tagValue){\r\n  filter = {filterKey, filterValue}\r\n  addTag(filterKey, filterValue, tagKey, tagValue)\r\n}\r\nremoveFilter(filterKey, filterValue){\r\n  var filterObject = filter.find(filterKey);\r\n  if(filtersWithMultipleparams[filterObject] !== -1){\r\n    remove(filterObject.value.filterValue)\r\n    if(filterObject.value === ''){\r\n      remove(filterObject)\r\n    }\r\n  } else {\r\n    remove(filterObject)\r\n  }\r\n}\r\naddTag(filterKey, filterValue, tagKey, tagValue){\r\n  tag = {key: tagKey, value: tagValue, filterKey, filterValue}\r\n}\r\nremoveTag(tagKey,filterKey, filterValue){\r\n  tag.remove(tagKey)\r\n  this.removeFilter(filterKey, filterValue)\r\n}\r\n*/\r\nclass SearchResult extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: [],   \r\n      filtersWithMultipleQueries: [\"status\",\"location\"],\r\n      resultCount: 0,\r\n      tagArray: [],\r\n      urlParams: new URLSearchParams(props.location.search),\r\n      filters: [\r\n        {\r\n          queryKey: 'q', \r\n          queryValue: new URLSearchParams(props.location.search).get('q'),\r\n        }\r\n      ],\r\n      minAndMaxPrice: undefined,\r\n    };\r\n  }\r\n\r\n  setSortingCategory = (e) => {\r\n    var sorting = e.target.value;\r\n    this.setFilter(\"order\", sorting, sorting);\r\n  };\r\n\r\n  getFiltersOnMount = () => {\r\n    let urlParams = this.state.urlParams;\r\n    \r\n    var params = {};\r\n    for (const [key, value] of urlParams) {\r\n      params[key] = value;\r\n      // console.log({ key, value });\r\n    }\r\n    this.setState({\r\n      filters:params\r\n    });\r\n    return params;\r\n  };\r\n\r\n  getTags = () => {\r\n    var filters = this.state.filters    \r\n    var tags = [];\r\n\r\n    for (const filter of filters) {\r\n      if(filter.tagKey !== undefined){\r\n        var tag = {\r\n          key: filter.tagKey,\r\n          value: filter.tagValue,\r\n          queryKey: filter.queryKey,\r\n          queryValue: filter.queryValue\r\n      }\r\n      tags.push(tag)\r\n    }\r\n    }\r\n    this.setState({\r\n      tagArray: tags\r\n    });\r\n    return tags;\r\n  }\r\n\r\n  makeSearch = () => {\r\n    let filters = this.state.filters;\r\n    var queryString = \"\";\r\n    for (const filter of filters) {\r\n      queryString += `${filter.queryKey}=${filter.queryValue}&`\r\n    }\r\n    /* Object.entries(filters).forEach(\r\n      ([key, value]) => (queryString += `${key}=${value}&`)\r\n    ); */\r\n    if (queryString[queryString.length - 1] === \"&\")\r\n      queryString = queryString.slice(0, queryString.length - 1);\r\n    let query = `/search?${queryString}`;\r\n    instanceAxs\r\n      .get(query)\r\n      .then((response) => {\r\n        // console.log(\"Search response\", response);\r\n        if (response.data.status) {\r\n          var returnedItems = response.data.items;\r\n          this.setState({\r\n            items: returnedItems,\r\n            resultCount: returnedItems.length,\r\n          });\r\n          window.history.pushState(\"page2\", \"seach made\", query);\r\n          console.log(\"get tags\", this.getTags())\r\n        } else {\r\n          return console.log(response.data.message);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  setFilter = (queryKey, queryValue, tagKey, tagValue) => {\r\n   \r\n     var queryFilters = this.state.filters;\r\n console.log(queryFilters)\r\n  var multipleQueryFilters = this.state.filtersWithMultipleQueries;\r\n    var filter = queryFilters[0]\r\n     /* var index = queryFilters.indexOf(filter);\r\n\r\n    \r\n    if(filter === null || filter === undefined){\r\n      var newFilter = {\r\n        queryKey: queryKey,\r\n        queryValue: queryValue,\r\n        tagKey: tagKey,\r\n        tagValue: tagValue\r\n      }\r\n\r\n      queryFilters.push(newFilter)      \r\n\r\n      this.setState({\r\n        filters: queryFilters\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    if(multipleQueryFilters.includes(queryKey,0)){\r\n      var qValue = filter.queryValue;\r\n      if(qValue === undefined || qValue === null) qValue = '';\r\n\r\n      if(!qValue.includes(queryValue)) qValue += \" \" + queryValue;\r\n      qValue = qValue.trim();\r\n\r\n      filter.queryValue = qValue\r\n      queryFilters[index] = filter;\r\n\r\n    } else {\r\n      console.log(filter)\r\n      filter.queryValue = queryValue\r\n      filter.tagValue = tagValue\r\n      queryFilters[index] = filter;\r\n      // this.getTags();\r\n    }\r\n    this.setState({\r\n      filters: queryFilters\r\n    })\r\n    console.log(\"query filters\",queryFilters) */\r\n\r\n    /* if (filter === \"status\") {\r\n      let val = parameters[\"status\"];\r\n      if (val === undefined || val === null) val = \"\";\r\n      if (!val.includes(queryValue)) val += \" \" + queryValue;\r\n      val = val.trim();\r\n      parameters[\"status\"] = val;\r\n      this.addFilterTag(tagKey, tagValue, filter, queryValue);\r\n      this.setState({\r\n        filters: parameters,\r\n      });\r\n    } else {\r\n      parameters[filter] = queryValue;\r\n      this.addFilterTag(tagKey, tagValue, filter, queryValue);\r\n      this.setState({\r\n        filters: parameters,\r\n      });\r\n    } */\r\n  };\r\n\r\n/*   addFilterTag = (key, value, queryKey, queryValue) => {\r\n    let tagArr = this.state.tagArray;\r\n    var object = tagArr.find((obj) => obj.key === key);\r\n    var objIndex = tagArr.indexOf(object);\r\n    if (objIndex !== -1) {\r\n      tagArr[objIndex] = {\r\n        key,\r\n        value: value,\r\n        queryKey,\r\n        queryValue: queryValue,\r\n      };\r\n    } else {\r\n      tagArr.push({\r\n        key: key,\r\n        value: value,\r\n        queryKey: queryKey,\r\n        queryValue: queryValue,\r\n      });\r\n    }\r\n    this.setState({\r\n      tagArr: tagArr,\r\n    });\r\n    console.log(\"tagarr\",tagArr)\r\n  }; */\r\n  \r\n  removeFilter = (filter, queryValue) => {\r\n    // remove a filter completely or erase a prop of it\r\n   /* var queryFilters = this.state.filters;\r\n    var multipleQueryFilters = this.state.filtersWithMultipleQueries;\r\n    var qValue = queryValue || undefined;\r\n\r\n    if(multipleQueryFilters.includes(filter)){\r\n      if(queryFilters[filter] !== undefined && queryFilters[filter] !== null && qValue !== undefined){\r\n\r\n        var qFilter = queryFilters[filter];\r\n        var newQueryFilter = String(qFilter).replace(qValue, '');\r\n        newQueryFilter = newQueryFilter.trim();\r\n        queryFilters[filter] = newQueryFilter;\r\n        if(queryFilters[filter] === '') {\r\n          delete queryFilters[filter]; \r\n        } \r\n      }\r\n    } else {\r\n      if(queryFilters[filter] !== undefined && queryFilters[filter] !== null) {\r\n        delete queryFilters[filter];\r\n        // this.removeTag(\"\",filter)\r\n      }\r\n    }\r\n    this.setState({\r\n      filters:queryFilters\r\n    }) \r\n    var tagArray = this.state.tagArray;\r\n        let obj = tagArray.find((x) => x.queryValue === queryValue);\r\n        if(obj !== undefined){\r\n          console.log(\"obj\")\r\n          let index = tagArray.indexOf(obj);\r\n          tagArray.splice(index, 1);\r\n          this.setState({ tagArray });\r\n        } */\r\n    // this.removeTag(\"\",filter)\r\n    /* var prop = property || undefined;\r\n    var params = this.state.filters;\r\n    if (filterOrProp === \"prop\") {\r\n      if (\r\n        params[filter] !== undefined &&\r\n        params[filter] !== null &&\r\n        prop !== undefined\r\n      ) {\r\n        let parameter = params[filter];\r\n        console.log(\"parameter\", parameter)\r\n        let newparameter = String(parameter).replace(prop, \"\");\r\n        newparameter = newparameter.trim();\r\n        console.log(\"new parameter\", newparameter);\r\n        params[filter] = newparameter;\r\n        if (params[filter] === \"\") delete this.state.filters[filter];\r\n        console.log(this.state.filters);\r\n      }\r\n    } else {\r\n      if (params[filter] !== undefined && params[filter] !== null) {\r\n        delete this.state.filters[filter];\r\n        console.log(this.state.filters);\r\n      }\r\n    } */\r\n  };\r\n\r\n  removeTag = (key, queryKey) => {\r\n    /* var tagArray = this.state.tagArray;\r\n    console.log(\"tagarray\", tagArray)\r\n    var qKey = queryKey || undefined;\r\n    let obj = tagArray.find((x) => x.key === key);\r\n    console.log(\"object\",obj)\r\n    if(obj !== undefined){\r\n      let index = tagArray.indexOf(obj);\r\n      tagArray.splice(index, 1);\r\n      this.setState({ tagArray });\r\n      this.removeFilter(obj.queryKey, obj.queryValue);\r\n    }  */\r\n    // if(qKey !== undefined) this.removeFilter(qKey);\r\n    \r\n    //  this.makeSearch();\r\n  };\r\n\r\n  removeAllFilters = () => {\r\n/*     var filterObj = this.state.filters;\r\n    filterObj = Object.fromEntries(\r\n      Object.entries(filterObj).filter(([key]) => key === \"q\")\r\n    ); // filter all  params except for \"q\" and convert the returned array back to object\r\n    this.setState({\r\n      tagArray: [],\r\n      filters: filterObj,\r\n    });\r\n    console.log(this.state.filters); */\r\n  };\r\n\r\n  componentDidMount() {\r\n    let params = this.getFiltersOnMount();\r\n    var queryString = \"\";\r\n    Object.entries(params).forEach(\r\n      ([key, value]) => (queryString += `${key}=${value}&`)\r\n    );\r\n    if (queryString[queryString.length - 1] === \"&\")\r\n      queryString = queryString.slice(0, queryString.length - 1);\r\n\r\n    let query = `/search?${queryString}`;\r\n    instanceAxs\r\n      .get(query)\r\n      .then((response) => {\r\n        // console.log(\"Search response\", response);\r\n        var minPrice = response.data.additional.minPrice;\r\n        var maxPrice = response.data.additional.maxPrice;\r\n        if (response.data.status) {\r\n          var returnedItems = response.data.items;\r\n          this.setState({\r\n            items: returnedItems,\r\n            resultCount: returnedItems.length,\r\n            minAndMaxPrice: { minPrice: minPrice, maxPrice: maxPrice }\r\n          });\r\n\r\n          this.props.history.push(`/search?${queryString}`);\r\n        } else {\r\n          return console.log(response.data.message);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid searchResultPageContainer\">\r\n        <div className=\"searchFilterComponents\">\r\n          <button className=\"btn btn-primary\" onClick={this.makeSearch}>\r\n            Bruk Endringer\r\n          </button>\r\n          <button\r\n            className=\"btn btn-primary \"\r\n            onClick={() => console.log(this.state.filters)}\r\n          >\r\n            Lagre Søk\r\n          </button>\r\n          <button className=\"btn btn-danger\" onClick={this.removeAllFilters}>\r\n            Fjerne Filtre\r\n          </button>\r\n          {this.state.minAndMaxPrice !== undefined && (\r\n            <Price\r\n              setfilter={this.setFilter}\r\n              removeTag={this.removeTag}\r\n              priceObject={this.state.minAndMaxPrice}\r\n              priceState={{priceMin: this.state.filters[\"price_min\"], priceMax: this.state.filters[\"price_max\"]}}\r\n            />\r\n          )}\r\n          <Status\r\n            setfilter={this.setFilter}\r\n            removeFilter={this.removeFilter}\r\n            checkedState={(this.state.filters[\"status\"])}\r\n          ></Status>\r\n        </div>\r\n        <div className=\"searchResults\">\r\n          <div className=\"searchResults_Info\">\r\n            <div className=\"searchResults_Order \">\r\n              <p style={{ margin: 0 }}>{this.state.resultCount} treff</p>\r\n\r\n              <div>\r\n                <select\r\n                  className=\"form-control\"\r\n                  style={{ width: 200 }}\r\n                  name=\"cars\"\r\n                  id=\"cars\"\r\n                  onChange={this.setSortingCategory}\r\n                >\r\n                  <option value=\"published\">Publisert</option>\r\n                  <option value=\"price_desc\">Pris lav til høy</option>\r\n                  <option value=\"price_asc\">Pris høy til lav</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"filterTagsContainer\">\r\n              {this.state.tagArray.map((tag) => {\r\n                return <Tags tag={tag} removeTag={this.removeTag} />;\r\n              })}\r\n            </div>\r\n          </div>\r\n          <div className=\"searchResults_Items\">\r\n            {this.state.items.map((item, index) => {\r\n              return (\r\n                <>\r\n                  <div className=\"itemCol\">\r\n                    <ProductCard\r\n                      key={item.annonce._id}\r\n                      img={item.annonce.images}\r\n                      price={item.annonce.price}\r\n                      name={item.annonce.title}\r\n                      id={item.annonce._id}\r\n                    />\r\n                  </div>\r\n                </>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPrice.defaultProps = {\r\n  priceObject: { minPrice: 0, maxPrice: 50 },\r\n};\r\nexport default SearchResult;\r\n"]},"metadata":{},"sourceType":"module"}