{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useSelector } from \"react-redux\";\nimport { login } from \"../api/Api\";\nimport { instanceAxs } from \"../api/Api\";\n\nconst isLoggedReducer = (state = false, action) => {\n  switch (action.type) {\n    case \"SIGN_IN\":\n      login(action.payload).then(data => {\n        console.log(data);\n        if (data.message === \"user logged in\") return true;\n      }).catch(reason => console.log(reason.message));\n\n    case \"SIGN_OUT\":\n      return false;\n\n    default:\n      return state;\n  }\n};\n\nexport function LoggedSelector() {\n  _s();\n\n  return useSelector(state => state.isLogged);\n}\n\n_s(LoggedSelector, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\n_c = LoggedSelector;\nexport default isLoggedReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoggedSelector\");","map":{"version":3,"sources":["/home/tolga/VS Code workspace/BrukthÃ¥nd/secondhand/src/reducers/isLoggedReducer.js"],"names":["useSelector","login","instanceAxs","isLoggedReducer","state","action","type","payload","then","data","console","log","message","catch","reason","LoggedSelector","isLogged"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,SAASC,WAAT,QAA4B,YAA5B;;AAGA,MAAMC,eAAe,GAAI,CAACC,KAAK,GAAG,KAAT,EAAgBC,MAAhB,KAA2B;AAChD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,SAAL;AACIL,MAAAA,KAAK,CAACI,MAAM,CAACE,OAAR,CAAL,CACKC,IADL,CACUC,IAAI,IAAI;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,YAAGA,IAAI,CAACG,OAAL,KAAiB,gBAApB,EAAsC,OAAO,IAAP;AACzC,OAJL,EAKKC,KALL,CAKWC,MAAM,IAAIJ,OAAO,CAACC,GAAR,CAAYG,MAAM,CAACF,OAAnB,CALrB;;AAMJ,SAAK,UAAL;AACI,aAAO,KAAP;;AACJ;AACI,aAAOR,KAAP;AAXR;AAaH,CAdD;;AAgBA,OAAO,SAASW,cAAT,GAAyB;AAAA;;AAC5B,SAAOf,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACY,QAAhB,CAAlB;AACH;;GAFeD,c;UACLf,W;;;KADKe,c;AAIhB,eAAeZ,eAAf","sourcesContent":["import { useSelector } from \"react-redux\";\nimport { login } from \"../api/Api\";\nimport { instanceAxs } from \"../api/Api\";\n\n\nconst isLoggedReducer =  (state = false, action) => {\n    switch (action.type) {\n        case \"SIGN_IN\":\n            login(action.payload)\n                .then(data => {\n                    console.log(data)\n                    if(data.message === \"user logged in\") return true;\n                })\n                .catch(reason => console.log(reason.message))\n        case \"SIGN_OUT\":\n            return false;\n        default:\n            return state;\n    }\n}\n\nexport function LoggedSelector(){\n    return useSelector(state => state.isLogged);\n}\n\nexport default isLoggedReducer;"]},"metadata":{},"sourceType":"module"}