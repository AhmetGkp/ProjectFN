{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useSelector } from \"react-redux\";\nimport { login } from \"../api/Api\";\nimport { instanceAxs } from \"../api/Api\";\n\nconst isLoggedReducer = (state = false, action) => {\n  switch (action.type) {\n    case \"SIGN_IN\":\n      return instanceAxs.post('/login', action.payload).then(response => {\n        console.log(response);\n        reteurn;\n      }).catch(error => {\n        console.log(error);\n      });\n\n    case \"SIGN_OUT\":\n      return false;\n\n    default:\n      return state;\n  }\n};\n\nexport function LoggedSelector() {\n  _s();\n\n  return useSelector(state => state.isLogged);\n}\n\n_s(LoggedSelector, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\n_c = LoggedSelector;\nexport default isLoggedReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoggedSelector\");","map":{"version":3,"sources":["/home/tolga/VS Code workspace/BrukthÃ¥nd/secondhand/src/reducers/isLoggedReducer.js"],"names":["useSelector","login","instanceAxs","isLoggedReducer","state","action","type","post","payload","then","response","console","log","reteurn","catch","error","LoggedSelector","isLogged"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,SAASC,WAAT,QAA4B,YAA5B;;AAGA,MAAMC,eAAe,GAAI,CAACC,KAAK,GAAG,KAAT,EAAgBC,MAAhB,KAA2B;AAChD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,SAAL;AACI,aAAOJ,WAAW,CAACK,IAAZ,CAAiB,QAAjB,EAA2BF,MAAM,CAACG,OAAlC,EACFC,IADE,CACGC,QAAQ,IAAI;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAG,QAAAA,OAAO;AACV,OAJE,EAKFC,KALE,CAKIC,KAAK,IAAI;AACZJ,QAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACH,OAPE,CAAP;;AAQJ,SAAK,UAAL;AACI,aAAO,KAAP;;AACJ;AACI,aAAOX,KAAP;AAbR;AAeH,CAhBD;;AAkBA,OAAO,SAASY,cAAT,GAAyB;AAAA;;AAC5B,SAAOhB,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACa,QAAhB,CAAlB;AACH;;GAFeD,c;UACLhB,W;;;KADKgB,c;AAIhB,eAAeb,eAAf","sourcesContent":["import { useSelector } from \"react-redux\";\nimport { login } from \"../api/Api\";\nimport { instanceAxs } from \"../api/Api\";\n\n\nconst isLoggedReducer =  (state = false, action) => {\n    switch (action.type) {\n        case \"SIGN_IN\":\n            return instanceAxs.post('/login', action.payload)\n                .then(response => {\n                    console.log(response)\n                    reteurn\n                })   \n                .catch(error => {\n                    console.log(error)\n                })\n        case \"SIGN_OUT\":\n            return false;\n        default:\n            return state;\n    }\n}\n\nexport function LoggedSelector(){\n    return useSelector(state => state.isLogged);\n}\n\nexport default isLoggedReducer;"]},"metadata":{},"sourceType":"module"}